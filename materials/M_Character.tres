[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 colour_override : hint_color;
uniform float override_lerp: hint_range(0, 1) = 0f;
uniform vec4 outline_colour : hint_color = vec4(1.0);
uniform float outline_width : hint_range(0, 1) = 0f;

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	vec4 base_colour = mix(tex, vec4(colour_override.rgb, tex.a * colour_override.a), override_lerp);
	
	float w = outline_width * 1.0 / float(textureSize(TEXTURE, 0).x);
	float h = outline_width * 1.0 / float(textureSize(TEXTURE, 0).y);
	
	float alpha = -4.0 * base_colour.a;
	alpha += texture(TEXTURE, UV + vec2(w, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(-w, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, h)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, -h)).a;
	
	vec4 finalColour = mix(base_colour, outline_colour, clamp(alpha, 0.0, 1.0));
	COLOR = vec4(finalColour.rgb, clamp(abs(alpha) + base_colour.a, 0.0, 1.0));
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/colour_override = Color( 1, 1, 1, 1 )
shader_param/override_lerp = 0.0
shader_param/outline_colour = Color( 1, 1, 1, 1 )
shader_param/outline_width = 0.0
